I"ﬂa<h1 id="prise-en-main-declipse">Prise en main d‚ÄôEclipse</h1>

<p>Lors du lancement, Eclipse demande de choisir/cr√©er un <em>workspace</em>. Ce dossier permettra de stocker plusieurs <em>projets</em>.
Pour ce module nous utiliserons toujours le m√™me workspace nomm√© <strong>WorkspaceJava</strong> √† cr√©er dans le dossier <strong>W:\Java</strong>.</p>

<p>Tous les fichiers seront cr√©√©s dans un seul et unique projet nomm√© <strong>TP_POO</strong>.</p>

<p>Toutes les classes seront pour l‚Äôinstant cr√©√©es dans le package par d√©faut (<em>default package</em>).</p>

<hr />

<h2 id="lincontournable-hello-world-">L‚Äôincontournable Hello World !</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello world !"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Suivez les instructions pr√©sentes dans la vid√©o suivante pour agencer les fen√™tres et cr√©er et ex√©cuter votre premier projet Eclipse (Remarque : pensez √† choisir une qualit√© HD dans les param√®tres <img src="/img/engrenage.png" alt="Param√®tres" />).</p>

<!-- <div class="embed-responsive embed-responsive-16by9">
<iframe class="embed-responsive-item" src="https://www.youtube.com/embed/KPUSAug3pzA"></iframe>
</div> -->

<div class="container-fluid">
  <div class="row">
    <div class="col-md-8">
      <div class="embed-responsive embed-responsive-16by9 div_style">
        <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/KPUSAug3pzA?vq=hd1080&amp;rel=0" width="560" height="315" frameborder="0" allowfullscreen=""></iframe>
      </div>
      <br />
    </div>
  </div>
</div>

<p>Configurez Eclipse pour qu‚Äôil utilise l‚Äôencodage UTF-8 pour les fichiers sources (et tous les fichiers textes). Cet encodage est aujourd‚Äôhui le standard pour √©changer des fichiers entre plusieurs syst√®mes (Linux, Windows, Mac). Pour ce faire, effectuez la manipulation d√©crite dans la vid√©o suivante.</p>

<!-- <div class="embed-responsive embed-responsive-16by9">
<iframe class="embed-responsive-item" src="https://www.youtube.com/embed/9D9ZXfThZE8"></iframe>
</div> -->

<div class="container-fluid">
  <div class="row">
    <div class="col-md-8">
      <div class="embed-responsive embed-responsive-16by9 div_style">
        <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/9D9ZXfThZE8?vq=hd1080&amp;rel=0" width="560" height="315" frameborder="0" allowfullscreen=""></iframe>
      </div>
      <br />
    </div>
  </div>
</div>

<p>La compl√©tion automatique de code sous Eclipse est activ√©e par le raccourci clavier <kbd>Ctrl</kbd>+<kbd>Espace</kbd>.</p>

<p>Il existe de nombreux <em>templates</em> pour compl√©ter automatiquement des blocs de codes. Les plus utiles sont les suivants :</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">sysout</code> (taper syso puis <kbd>Ctrl</kbd>+<kbd>Espace</kbd>)</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">main</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">new</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">foreach</code>, <code class="highlighter-rouge">for</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">if</code>, <code class="highlighter-rouge">ifelse</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">switch</code></p>
  </li>
</ul>

<hr />

<h1 id="exp√©rimentations-sur-les-cha√Ænes-de-caract√®res">Exp√©rimentations sur les cha√Ænes de caract√®res</h1>

<h2 id="exercice-1">Exercice 1</h2>

<p>On d√©sire cr√©er un programme affichant sur la console le texte suivant :</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Portez ce vieux whisky au juge blond qui fume
The quick brown fox jumps over the lazy dog
La phrase fran√ßaise comporte ? caract√®res
La phrase anglaise comporte ? caract√®res
</code></pre></div></div>

<p>o√π les <code class="highlighter-rouge">?</code> auront √©t√© remplac√©s par le nombre de caract√®res.</p>

<ul>
  <li>
    <p>Cr√©er une classe <code class="highlighter-rouge">ExperimentationChaines</code> qui contiendra une m√©thode main.</p>
  </li>
  <li>
    <p>Cr√©er des variables de type <code class="highlighter-rouge">String</code> et leur affecter les phrases √† afficher.</p>
  </li>
</ul>

<p>Exemple :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">phraseFr</span> <span class="o">=</span> <span class="s">"Portez ce vieux whisky au juge blond qui fume"</span><span class="o">;</span>
</code></pre></div></div>

<ul>
  <li>Construire l‚Äôaffichage souhait√© en appelant <code class="highlighter-rouge">System.out.println</code> pour chacune des 4 lignes √† afficher.</li>
</ul>

<h2 id="exercice-2">Exercice 2</h2>

<ul>
  <li>Cr√©er une nouvelle classe <code class="highlighter-rouge">ExperimentationChaines2</code> qui devra afficher le m√™me r√©sultat mais en concat√©nant les 4 cha√Ænes dans <strong>une seule cha√Æne</strong> qui contiendra le r√©sultat et sera pass√©e √† une fonction pour affichage (console ou fen√™tre de dialogue).</li>
</ul>

<p>Le retour √† la ligne est cod√© diff√©remment selon les syst√®mes, il utilise les caract√®res CR (Carriage Return) de valeur ‚Äò\r‚Äô (0x0D) et LF (Line Feed) de valeur ‚Äò\n‚Äô (0x0A) :</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* LF (0x0A) : Unix, Linux, Mac OS X, ...

* CR (0x0D) : Commodore, ...

* CRLF (0x0D 0x0A) : Windows, Commandes AT, ...
</code></pre></div></div>

<p>Pour pallier ce probl√®me, la classe System de java permet de r√©cup√©rer la cha√Æne associ√©e au retour √† la ligne :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">lineSep</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"line.separator"</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Tester votre programme avec un affichage sur la console (<code class="highlighter-rouge">System.out.println</code>)</p>
  </li>
  <li>
    <p>Remplacer l‚Äôutilisation de <code class="highlighter-rouge">System.out.println</code> par <code class="highlighter-rouge">JOptionPane.showMessageDialog(null,message);</code> o√π message est une variable de type <code class="highlighter-rouge">String</code> contenant le message √† afficher. Vous aurez besoin d‚Äôimporter la classe <code class="highlighter-rouge">JOptionPane</code> (utiliser les suggestions de r√©solution d‚Äôerreur d‚ÄôEclipse en cliquant sur la petite croix rouge en d√©but de ligne).</p>
  </li>
</ul>

<h2 id="exercice-3---anagrammes">Exercice 3 - Anagrammes</h2>

<ul>
  <li>
    <p>Cr√©er une nouvelle classe <code class="highlighter-rouge">Anagrams</code> qui contiendra une m√©thode (pas de <code class="highlighter-rouge">main</code>) qui renvoie <code class="highlighter-rouge">true</code>si les deux mots sont des anagrammes :</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isAnagram</span><span class="o">(</span><span class="nc">String</span> <span class="n">firstWord</span><span class="o">,</span> <span class="nc">String</span> <span class="n">secondWord</span><span class="o">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Utiliser les m√©thodes de la classe <code class="highlighter-rouge">String</code> (<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html">javadoc de la classe String</a>) pour tenir compte de la pr√©sence de majuscules (qui doivent √™tre ignor√©es) et pour convertir une cha√Æne en un tableau de caract√®res (<code class="highlighter-rouge">char</code>).
  Pour la comparaison des lettres des deux mots, elle peut se faire en 3 lignes de code en utilisant 2 m√©thodes de la classe <code class="highlighter-rouge">Arrays</code> (<a href="https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html">javadoc de la classe Arrays</a>). La classe <code class="highlighter-rouge">Arrays</code> contient des m√©thodes statiques destin√©es √† manipuler les tableaux (tri, comparaison, remplissage, ‚Ä¶). Ces m√©thodes s‚Äôappellent directement sur la classe. Exemple de remplissage d‚Äôun tableau avec des 0 :</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">tableau</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Cr√©er une nouvelle classe <code class="highlighter-rouge">AnagramsTests</code> qui contiendra une m√©thode <code class="highlighter-rouge">main</code> permettant de valider le bon fonctionnement de la m√©thode <code class="highlighter-rouge">isAnagram</code>.</p>
  </li>
  <li>
    <p>Validation par des tests unitaires.</p>

    <ul>
      <li>
        <p>T√©l√©charger le <a href="/files/AnagramsUnitTests.java">fichier de tests unitaires</a></p>
      </li>
      <li>
        <p>Depuis l‚Äôexplorateur de fichier du syst√®me d‚Äôexploitation, glisser-d√©poser le fichier .java sur (default package) dans la vue <em>Package Explorer</em> d‚ÄôEclipse</p>
      </li>
      <li>
        <p>Ex√©cuter ce fichier. Il s‚Äôagit d‚Äôun fichier contenant des tests <strong>JUnit</strong> (framework de tests unitaires). Il est reconnu automatiquement par Eclipse comme tel et est ex√©cut√© par le moteur de tests unitaires qui affiche ensuite les r√©sultats des tests dans une fen√™tre d√©di√©e.</p>
      </li>
      <li>
        <p>Vid√©o de la manipulation √† effectuer :</p>
      </li>
    </ul>
  </li>
</ul>

<!-- <div class="embed-responsive embed-responsive-16by9">
<iframe class="embed-responsive-item" src="https://www.youtube.com/embed/Esf6rkbPocA"></iframe>
</div> -->

<div class="container-fluid">
  <div class="row">
    <div class="col-md-8">
      <div class="embed-responsive embed-responsive-16by9 div_style">
        <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/Esf6rkbPocA?vq=hd1080&amp;rel=0" width="560" height="315" frameborder="0" allowfullscreen=""></iframe>
      </div>
      <br />
    </div>
  </div>
</div>

<ul>
  <li>Si le r√©sultat des tests montre un √©chec, corriger le code de votre m√©thode <code class="highlighter-rouge">isAnagram</code>.</li>
</ul>

<p>Le principe de JUnit est le suivant :</p>

<ul>
  <li>
    <p>Les m√©thodes qui portent l‚Äôannotation <code class="highlighter-rouge">@Test</code> seront ex√©cut√©es automatiquement par JUnit</p>
  </li>
  <li>
    <p>Ces m√©thodes doivent contenir des assertions (<em>En programmation informatique, une assertion est une expression qui doit √™tre √©valu√©e √† vrai</em>)</p>
  </li>
  <li>
    <p>Les assertions classiques sont :</p>

    <ul>
      <li>
        <p><code class="highlighter-rouge">assertEquals(expected, actual)</code> : permet de comparer le r√©sultat d‚Äôun calcul avec la valeur attendue</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">assertEquals(expected, actual, delta)</code> : idem mais pour les nombres cod√©s en flottant (<code class="highlighter-rouge">float</code>et <code class="highlighter-rouge">double</code>) pour lesquels on ne peut pas faire de tests d‚Äô√©galit√© stricte. On v√©rifie ici que (expected - delta) &lt; actual &lt; (expected + delta)</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">assertTrue(condition)</code> et <code class="highlighter-rouge">assertFalse(condition)</code> : v√©rifie qu‚Äôune condition est vraie ou fausse</p>
      </li>
      <li>
        <p>Il existe une variante qui utilise la syntaxe <code class="highlighter-rouge">assertThat</code> qui donne des tests plus lisibles mais qui est plus d√©licate √† mettre en oeuvre.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="passage-par-valeur--r√©f√©rences">Passage par valeur / r√©f√©rences</h1>

<ul>
  <li>Cr√©er une nouvelle classe <code class="highlighter-rouge">PassageParValeur</code> qui contiendra le code suivant :</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PassageParValeur</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">nbCookies</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>

		<span class="n">mangerDesCookies</span><span class="o">(</span><span class="n">nbCookies</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Il reste "</span> <span class="o">+</span> <span class="n">nbCookies</span> <span class="o">+</span> <span class="s">" cookies !"</span><span class="o">);</span>

	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mangerDesCookies</span><span class="o">(</span><span class="kt">int</span> <span class="n">nbCookies</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">nbCookies</span> <span class="o">=</span> <span class="n">nbCookies</span> <span class="o">-</span> <span class="mi">2</span><span class="o">;</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Je viens de manger 2 cookies et il en reste : "</span> <span class="o">+</span> <span class="n">nbCookies</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>
    <p>Placer un point d‚Äôarr√™t en face de la m√©thode mangerDesCookies (double cliquer dans la colonne situ√©e √† gauche des num√©ros de lignes  et lancer le d√©bugger en cliquant sur l‚Äôic√¥ne avec un insecte (<em>bug</em>) situ√©e √† c√¥t√© du bouton <em>Run</em> (voir <a href="/eclipse/">exemple d‚Äôutilisation du  debugger</a>).</p>
  </li>
  <li>
    <p>V√©rifier et interpr√©ter le comportement de ce programme.</p>
  </li>
  <li>
    <p>Cr√©er maintenant deux nouvelles classes <code class="highlighter-rouge">PassageParReference</code> et <code class="highlighter-rouge">PaquetCookies</code></p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PassageParReference</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">PaquetCookies</span> <span class="n">paquet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaquetCookies</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>

		<span class="n">mangerDesCookies</span><span class="o">(</span><span class="n">paquet</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Il reste "</span> <span class="o">+</span> <span class="n">paquet</span><span class="o">.</span><span class="na">nbCookies</span> <span class="o">+</span> <span class="s">" cookies !"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mangerDesCookies</span><span class="o">(</span><span class="nc">PaquetCookies</span> <span class="n">paquet</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">paquet</span><span class="o">.</span><span class="na">nbCookies</span> <span class="o">=</span> <span class="n">paquet</span><span class="o">.</span><span class="na">nbCookies</span> <span class="o">-</span> <span class="mi">2</span><span class="o">;</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Je viens de manger 2 cookies et il en reste : "</span> <span class="o">+</span> <span class="n">paquet</span><span class="o">.</span><span class="na">nbCookies</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PaquetCookies</span> <span class="o">{</span>

	<span class="kt">int</span> <span class="n">nbCookies</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">PaquetCookies</span><span class="o">(</span><span class="kt">int</span> <span class="n">nbCookies</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">nbCookies</span> <span class="o">=</span> <span class="n">nbCookies</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>A l‚Äôaide du debugger, analyser le comportement de ce programme et interpr√©ter le r√©sultat.</li>
</ul>

<hr />

<h1 id="une-histoire-de-portes">Une histoire de portes</h1>

<ul>
  <li>
    <p>Cr√©er une nouvelle classe <code class="highlighter-rouge">Porte</code> correspondant au diagramme de classe suivant :</p>

    <p><img src="/img/Porte_UML.png" alt="Diagramme UML Porte" /></p>

    <p>Ce diagramme correspond au squelette de code source suivant. On peut noter que le constructeur sans argument est g√©n√©r√© automatiquement par le compilateur java lorsqu‚Äôil ne trouve aucun constructeur.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Porte</span> <span class="o">{</span>

      <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">estOuverte</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
      <span class="kd">public</span> <span class="nc">String</span> <span class="n">couleur</span><span class="o">;</span>

      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">ouvrir</span><span class="o">(){</span>
          <span class="o">...</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fermer</span><span class="o">(){</span>
          <span class="o">...</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">franchir</span><span class="o">(){</span>
          <span class="o">...</span>
      <span class="o">}</span>

  <span class="o">}</span>

</code></pre></div>    </div>
  </li>
  <li>
    <p>Compl√©ter le code source des m√©thodes de la classe <code class="highlighter-rouge">Porte</code> qui sera responsable de l‚Äôaffichage des messages sur la console en fonction des actions qui lui sont demand√©es et de son √©tat. Cr√©er une classe <code class="highlighter-rouge">PorteTests</code> avec une m√©thode <code class="highlighter-rouge">main</code> permettant de produire l‚Äôaffichage suivant sur la console en ne cr√©ant qu‚Äôune seule porte et sans acc√©der directement √† la variable d‚Äôinstance estOuverte depuis la classe PorteTest :</p>
  </li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Tentative de franchissement : A√Øe !
    Tentative de fermeture : Fermer une porte d√©j√† ferm√©e hmmm...faut-il que je cloue des planches ?
    Tentative d'ouverture : Ouverture r√©ussie
    Tentative d'ouverture : Ouvrir une porte d√©j√† ouverte est un concept qui me d√©passe...mais apr√®s tout je ne suis qu'une porte
    Tentative de franchissement : Quelqu'un franchit la porte.
    Tentative de fermeture : Fermeture r√©ussie
    Tentative de franchissement : A√Øe !
</code></pre></div></div>

<hr />

<h1 id="le-mot-cl√©-static">Le mot cl√© static</h1>

<ul>
  <li>
    <p>Modifier la classe <code class="highlighter-rouge">Porte</code> pour lui ajouter une variable <code class="highlighter-rouge">static</code> (variable de classe) :</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="n">hauteur</span><span class="o">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Ajouter du code √† votre classe <code class="highlighter-rouge">PorteTests</code> permettant de mettre en √©vidence que chaque instance de <code class="highlighter-rouge">Porte</code> poss√®de une couleur mais que lorsque l‚Äôon modifie la hauteur d‚Äôune porte, toutes les autres changent √©galement.</p>
  </li>
  <li>
    <p>Le mot cl√© <code class="highlighter-rouge">static</code> est tr√®s utilis√© pour les m√©thodes qui ont un comportement de fonctions (au sens math√©matique) :</p>

    <ul>
      <li>les m√™mes entr√©es produisent les m√™mes sorties</li>
      <li>pas de d√©pendance √† un √©tat de l‚Äôobjet ou du programme</li>
      <li>pas de modification de l‚Äô√©tat de l‚Äôobjet ou du programme</li>
      <li>c‚Äôest le cas des fonctions math√©matiques de la classe <code class="highlighter-rouge">Math</code> (abs, cos, floor, cf. <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Math.html">javadoc de la classe Math</a>)</li>
    </ul>
  </li>
</ul>

<hr />

<ul>
  <li>
    <p>Cr√©er une classe <code class="highlighter-rouge">Conversion</code> qui contiendra deux m√©thodes statiques (√† compl√©ter) :</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">toRpm</span><span class="o">(</span><span class="kt">double</span> <span class="n">radPerSec</span><span class="o">)</span> <span class="c1">//Conversion de radians par secondes en tours par minute</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">toRadPerSec</span><span class="o">(</span><span class="kt">double</span> <span class="n">rpm</span><span class="o">)</span> <span class="c1">//Conversion de tours par minute en radians par secondes</span>
</code></pre></div>    </div>

    <p>RPM : Rotation Per Minute</p>
  </li>
  <li>
    <p>Cr√©er une classe de tests unitaires JUnit pour valider le bon fonctionnement de ces deux m√©thodes en vous inspirant de la vid√©o suivante (pour les valeurs √† injecter dans les tests, vous pouvez faire effectuer la conversion par Google) :</p>
  </li>
</ul>

<!-- <div class="embed-responsive embed-responsive-16by9">
<iframe class="embed-responsive-item" src="https://www.youtube.com/embed/ToMNhUUrumc"></iframe>
</div> -->

<div class="container-fluid">
  <div class="row">
    <div class="col-md-8">
      <div class="embed-responsive embed-responsive-16by9 div_style">
        <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/ToMNhUUrumc?vq=hd1080&amp;rel=0" width="560" height="315" frameborder="0" allowfullscreen=""></iframe>
      </div>
      <br />
    </div>
  </div>
</div>

<p><a href="/enonces/tp2">Suite‚Ä¶</a></p>
:ET