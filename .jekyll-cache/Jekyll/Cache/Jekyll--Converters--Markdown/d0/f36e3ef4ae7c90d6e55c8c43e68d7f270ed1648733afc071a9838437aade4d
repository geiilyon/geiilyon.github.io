I"-<h1 id="héritage---suite">Héritage - suite</h1>

<h2 id="classes-abstraites">Classes abstraites</h2>

<p>Dans l’exemple de la classe <code class="highlighter-rouge">Etudiant</code> étudié dans la partie précédente, les méthodes <code class="highlighter-rouge">getSeuilCool()</code>, <code class="highlighter-rouge">getSeuilLoose()</code>,  <code class="highlighter-rouge">getSeuilPasPire()</code> et <code class="highlighter-rouge">passerUnPartiel()</code> avaient besoin d’être définies dans la classe Etudiant seulement dans le but d’être redéfinies dans les sous-classes. Dans ce cas là, pour ne pas être obligé de fournir une implémentation, on peut déclarer ces méthodes comme étant abstraites (<code class="highlighter-rouge">abstract</code>) :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">abstract</span> <span class="kd">protected</span> <span class="kt">double</span> <span class="nf">getSeuilLoose</span><span class="o">();</span>
</code></pre></div></div>

<p>Lorsque l’on déclare une méthode abstraite, on ne fournit pas de corps à la méthode (les sous-classes se chargeront de l’implémenter).</p>

<p>Dès lors qu’elle contient une méthode abstraite une classe doit elle aussi être déclarée abstraite :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Etudiant</span>
</code></pre></div></div>

<p>En effet, son implémentation étant incomplète, elle ne peut pas être instanciée. On ne peut instancier que des classes concrètes. Les classes abstraites servent à factoriser du code commun ou à définir des types très généraux qui permettront de manipuler des classes concrètes par polymorphisme.</p>

<ul>
  <li>Modifier les classes précédentes comme indiqué et vérifier qu’il n’est maintenant plus possible de créer d’instance de la classe Etudiant. Vérifier par contre que votre code précédent fonctionne toujours.</li>
</ul>

<h2 id="les-interfaces">Les interfaces</h2>

<p>Les interfaces en Java sont des classes 100% abstraites. Elles définissent un jeu de méthodes qui pourront être appelées sur un objet qui implémente cette interface. Elles permettent de contourner une <em>limitation de Java</em> : l’absence d’héritage multiple. En effet une classe Java ne peut étendre qu’une seule classe. Par contre elle peut implémenter autant d’interfaces qu’elle le souhaite.</p>

<p>De très nombreuses classes de la bibliothèque Java s’appuient sur les interfaces. Pour définir une interface on utilise le mot clé <code class="highlighter-rouge">interface</code>. En cliquant sur la petite flèche située à côté du bouton de création d’une classe, on peut choisir de créer une nouvelle <code class="highlighter-rouge">interface</code>. Une interface est définie de la même manière qu’une classe, dans un fichier <em>.java</em> portant le même nom que l’interface.</p>

<ul>
  <li>
    <p>Créer une interface <code class="highlighter-rouge">UserInterface</code>qui définira les méthodes <code class="highlighter-rouge">displayMessage</code> et <code class="highlighter-rouge">getUserInputString</code> pour afficher un message et demander une entrée à l’utilisateur (le paramètre <code class="highlighter-rouge">query</code> est utilisé pour afficher la question à poser à l’utilisateur avant d’attendre sa réponse qu’elle retournera) :</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserInterface</span> <span class="o">{</span>

      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">displayMessage</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">);</span>

      <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getUserInputString</span><span class="o">(</span><span class="nc">String</span> <span class="n">query</span><span class="o">);</span>
  <span class="o">}</span>

</code></pre></div>    </div>

    <p>L’idée est de définir une interface commune pour différentes classes qui permettront d’interagir avec l’utilisateur (en mode console et avec des boîtes de dialogue). La classe <code class="highlighter-rouge">GuessTheNumber</code> implémentera la logique du jeu et possédera une référence vers un objet de type <code class="highlighter-rouge">UserInterface</code> pour afficher des messages et récupérer des saisies de l’utilisateur.</p>

    <p><img src="/img/GuessTheNumber.png" alt="GuessTheNumberClassDiagram" />
  <img src="/img/EclipseUmlLegend.png" alt="Legende Eclispe UML" /></p>
  </li>
  <li>
    <p>Créer une classe <code class="highlighter-rouge">ConsoleUserInterface</code> qui implémente l’interface <code class="highlighter-rouge">UserInterface</code>. Les messages seront affichés sur la sortie standard et les entrées proviendront de l’entrée standard.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConsoleUserInterface</span> <span class="kd">implements</span> <span class="nc">UserInterface</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Créer une classe <code class="highlighter-rouge">GuessTheNumber</code> dont le constructeur prendra en paramètre un objet de type <code class="highlighter-rouge">UserInterface</code>. Cette classe possédera une méthode <code class="highlighter-rouge">play()</code> pour lancer le jeu qui utilisera les méthodes définies dans l’interface pour interagir avec l’utilisateur. Cette classe implémentera le jeu classique qui consiste à tirer aléatoirement un nombre entre 0 et MAXIMUM (on prendra la valeur 100) et à demander à l’utilisateur de le deviner en lui indiquant seulement à chaque saisie si le nombre est trop petit ou trop grand (bonus : vérifier expérimentalement et expliquer pourquoi on pourrait parier qu’on est capable de trouver le bon résultat en 7 coups maximum pour un tirage entre 0 et 100). Pour la conversion d’une chaîne en nombre, utiliser <code class="highlighter-rouge">Integer.parseInt</code> ou un <code class="highlighter-rouge">Scanner</code>.</p>
  </li>
  <li>
    <p>Créer une classe <code class="highlighter-rouge">ConsoleGame</code> permettant de jouer au jeu <code class="highlighter-rouge">GuessTheNumber</code> avec une interface en mode console (en utilisant la classe <code class="highlighter-rouge">ConsoleUserInterface</code>).</p>
  </li>
  <li>
    <p>Créer maintenant une nouvelle classe <code class="highlighter-rouge">DialogUserInterface</code> qui implémente l’interface <code class="highlighter-rouge">UserInterface</code> en s’appuyant sur la classe <code class="highlighter-rouge">JOptionPane</code></p>
  </li>
  <li>
    <p>Tester <code class="highlighter-rouge">GuessTheNumber</code> avec cette nouvelle classe <code class="highlighter-rouge">DialogUserInterface</code>.</p>

    <p><strong>Faire valider par un enseignant.</strong></p>
  </li>
</ul>

<p><a href="/enonces/tp5">Suite…</a></p>
:ET