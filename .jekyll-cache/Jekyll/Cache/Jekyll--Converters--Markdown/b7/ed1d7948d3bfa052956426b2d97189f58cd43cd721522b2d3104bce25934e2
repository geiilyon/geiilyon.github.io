I"^<h1 id="utilisation-du-debugger">Utilisation du debugger</h1>

<p>Exemple d’utilisation du debugger sur l’exemple vu en cours des références sur des objets de type Porte.</p>

<!-- <div class="embed-responsive embed-responsive-16by9">
<iframe class="embed-responsive-item" src="https://www.youtube.com/embed/oU6aRTBzKeY"></iframe>
</div> -->

<div class="container-fluid">
  <div class="row">
    <div class="col-md-8">
      <div class="embed-responsive embed-responsive-16by9 div_style">
        <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/oU6aRTBzKeY?vq=hd1080&amp;rel=0" width="560" height="315" frameborder="0" allowfullscreen=""></iframe>
      </div>
      <br />
    </div>
  </div>
</div>

<p>Eclipse utilise le concept de <em>perspective</em> : dans la vidéo ci-dessus, le lancement du debugger provoque le passage dans la perspective debug et à la fin de la session de debuggage on revient à la perspective <em>Java</em>. Une perspective correspond à un ensemble de vues adaptées à une activité : développement, debuggage, gestion de versions, recherche de bugs par analyse statique du code…</p>

<h1 id="raccourcis-clavier">Raccourcis clavier</h1>

<ul>
  <li>
    <p><kbd>Ctrl</kbd>+<kbd>Espace</kbd> : complétion automatique</p>
  </li>
  <li>
    <p><kbd>Ctrl</kbd>+<kbd>D</kbd> : supprime la ligne entière</p>
  </li>
  <li>
    <p><kbd>Alt</kbd>+<kbd>&uparrow;</kbd> ou <kbd>Alt</kbd>+<kbd>&downarrow;</kbd> : déplace la ligne entière</p>
  </li>
  <li>
    <p><kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>R</kbd> : renommage intelligent (Refactor-&gt;Rename), permet de renommer une variable, une méthode, une classe en prenant soin de modifier tous les endroits du code où le nom apparaît (renomme même le fichier .java en cas de changement de nom de la classe).</p>
  </li>
  <li>
    <p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd> : mise en forme du code source (corrige l’indentation, les sauts de lignes, l’emplacement des accolades, les lignes trop longues, …)</p>
  </li>
  <li>
    <p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>O</kbd> : organise les imports (ajoute tous les imports de packages nécessaires)</p>
  </li>
  <li>
    <p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>T</kbd> : ouverture rapide d’une classe ou une interface</p>
  </li>
</ul>

<h1 id="astuces">Astuces</h1>

<ul>
  <li>
    <p><kbd>Ctrl</kbd>+clic sur une variable ou une méthode permet de sauter à sa définition.</p>
  </li>
  <li>
    <p>Utiliser les suggestions de corrections d’erreurs d’Eclipse pour générer le code manquant ou corriger des erreurs de programmation.</p>
  </li>
  <li>
    <p>Eclipse compile les fichiers lors de leur sauvegarde. Il est parfois nécessaire de sauvegarder tous les fichiers ayant des modifications pour supprimer toutes les erreurs de compilation.</p>
  </li>
  <li>
    <p>L’appui sur le bouton <em>Run</em> lance le fichier qui est au premier plan de l’éditeur s’il possède une méthode <code class="highlighter-rouge">main</code> ou s’il s’agit d’une classe de tests unitaires, sinon c’est le dernier fichier qui a été exécuté qui est relancé.</p>
  </li>
  <li>
    <p>Dans une boite de dialogue, taper les différents majuscules du nom de la classe (ou méthode)</p>

    <p><img src="/img/majCompletion.png" alt="completion partielle" /></p>
  </li>
  <li>
    <p>Lors de l’exécution si une boîte de dialogue demande les ressources à sauvegarder, cocher la case “<em>Always save resources before launching</em>”</p>

    <p><img src="/img/AlwaysSaveResources.png" alt="Always save resources dialog" /></p>
  </li>
  <li>
    <p>Pour ajouter des fichiers sources à un projet Java existant, les faire glisser depuis l’explorateur de fichiers directement sur la fenêtre package explorer d’Eclipse et sélectionner l’option permettant de les copier dans le répertoire du projet.</p>
  </li>
</ul>
:ET