I"’E<h1 id="tri-dune-liste-d√©tudiants">Tri d‚Äôune liste d‚Äô√©tudiants</h1>

<p>Les classes de collections telles que les listes (ex : <code class="highlighter-rouge">ArrayList</code>) peuvent √™tre tri√©es en utilisant les m√©thodes de la classe <code class="highlighter-rouge">Collections</code>. Cette derni√®re classe est l‚Äô√©quivalent de la classe <code class="highlighter-rouge">Arrays</code> qui √©tait d√©di√©e aux tableaux. Elle permet de manipuler les diff√©rents types de collections tels que <code class="highlighter-rouge">List</code>, <code class="highlighter-rouge">Set</code> (ensemble d‚Äô√©l√©ments uniques) et <code class="highlighter-rouge">Map</code>(tableaux associatifs : cl√© -&gt; Valeur).</p>

<p>La classe <code class="highlighter-rouge">Collections</code> d√©finit deux m√©thodes qui permettent de trier des listes.</p>

<p><img src="/img/CollectionsSort.png" alt="CollectionsSort" /></p>

<p>Nous allons nous int√©resser √† la premi√®re, qui poss√®de la signature suivante :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">Comparable</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;&gt;</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">);</span>
</code></pre></div></div>

<p>La signature de cette m√©thode est un peu intimidante. Pour simplifier, on peut dans un premier temps la voir de la fa√ßon suivante :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">);</span>
</code></pre></div></div>

<p>Cette m√©thode permet de trier un objet de type <code class="highlighter-rouge">List&lt;T&gt;</code>. Ceci soul√®ve 2 questions :</p>

<ul>
  <li>
    <p>on a une ArrayList et pas une List, comment fait-on ?</p>
  </li>
  <li>
    <p>Comment la m√©thode <code class="highlighter-rouge">sort</code> peut-elle comparer deux √©tudiants ? La notion de sup√©riorit√©/inf√©riorit√©/√©galit√© des √©tudiants ne peut pas √™tre devin√©e automatiquement.</p>
  </li>
</ul>

<p>Pour r√©pondre √† la premi√®re question, une <code class="highlighter-rouge">ArrayList&lt;T&gt;</code> est une <code class="highlighter-rouge">List&lt;T&gt;</code>. Pour le savoir il faut aller sur la <a href="https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html">javadoc de la classe ArrayList</a>. L‚Äôinformation est pr√©sente dans l‚Äôen-t√™te de la description de la classe (<em>All implemented interfaces</em>) et dans la d√©claration de la classe (juste en-dessous de la ligne horizontale) dont le contenu est :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span>
<span class="kd">extends</span> <span class="nc">AbstractList</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span>
<span class="kd">implements</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;,</span> <span class="nc">RandomAccess</span><span class="o">,</span> <span class="nc">Cloneable</span><span class="o">,</span> <span class="nc">Serializable</span>
</code></pre></div></div>

<p>La classe <code class="highlighter-rouge">ArrayList&lt;E&gt;</code> h√©rite de <code class="highlighter-rouge">AbstractList&lt;E&gt;</code> (classe qui regroupe les algorithmes communs √† diff√©rents types de listes) et impl√©mente plusieurs interfaces dont <code class="highlighter-rouge">List&lt;E&gt;</code>. Une <code class="highlighter-rouge">ArrayList&lt;E&gt;</code> est donc un objet du type <code class="highlighter-rouge">List&lt;E&gt;</code>, et gr√¢ce au polymorphisme on peut passer une <code class="highlighter-rouge">ArrayList&lt;E&gt;</code> √† toutes les m√©thodes qui attendent un objet de type <code class="highlighter-rouge">List&lt;E&gt;</code>. Remarque : on peut utiliser la lettre de son choix E, T lors de la d√©finition d‚Äôune classe ou m√©thode g√©n√©rique. Cette lettre est une variable de type.</p>

<p>La deuxi√®me question concernait la possibilit√© de pouvoir comparer 2 objets de type <code class="highlighter-rouge">Etudiant</code>. C‚Äôest le sens de la partie obscure de la d√©claration qui est l√† pour que le compilateur Java v√©rifie bien que les √©l√©ments de la liste impl√©mentent l‚Äôinterface Comparable. Il y a m√™me une contrainte suppl√©mentaire sur la possibilit√© de comparer des objets qui h√©ritent de la classe <code class="highlighter-rouge">T</code> mais cela sort du cadre de ce cours. En r√©sum√©, pour que l‚Äôon puisse comparer deux √©tudiants, il faut que le classe <code class="highlighter-rouge">Etudiant</code> impl√©mente l‚Äôinterface <code class="highlighter-rouge">Comparable&lt;Etudiant&gt;</code>.</p>

<p>L‚Äôinterface <code class="highlighter-rouge">Comparable&lt;T&gt;</code> est <strong>d√©j√† d√©finie dans la biblioth√®que Java</strong> de la mani√®re suivante (elle fait partie du package java.lang qui est import√© automatiquement, cf. <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html">javadoc</a>) :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="no">T</span> <span class="n">o</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>La javadoc de la m√©thode nous indique qu‚Äôil faut retourner <strong>un entier n√©gatif (respectivement positif) si l‚Äôobjet sur lequel est appel√©e la m√©thode est inf√©rieur (respectivement sup√©rieur) √† l‚Äôobjet pass√© en param√®tre. Si les objets sont √©gaux, la m√©thode compareTo doit retourner 0.</strong></p>

<h2 id="prise-en-main---tri-dune-liste-de-cha√Æne">Prise en main - tri d‚Äôune liste de cha√Æne</h2>

<ul>
  <li>
    <p>Cr√©er une classe <code class="highlighter-rouge">TestCompare</code> contenant une m√©thode <code class="highlighter-rouge">main</code> et afficher les r√©sultats renvoy√©s par la m√©thode compareTo de la classe <code class="highlighter-rouge">String</code> en testant diff√©rentes combinaisons de cha√Ænes de caract√®res (Exemple : <code class="highlighter-rouge">"toto".compareTo("abc")</code>)</p>
  </li>
  <li>
    <p>Cr√©er une liste de cha√Ænes en utilisant la m√©thode <code class="highlighter-rouge">asList</code> de la classe <code class="highlighter-rouge">Arrays</code> :</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Mr. Burns"</span><span class="o">,</span> <span class="s">"Flanders"</span><span class="o">,</span> <span class="s">"Krusty"</span><span class="o">,</span> <span class="s">"Smithers"</span><span class="o">,</span> <span class="s">"Homer"</span><span class="o">,</span> <span class="s">"Bart"</span><span class="o">,</span> <span class="s">"Marge"</span><span class="o">,</span> <span class="s">"Lisa"</span><span class="o">,</span>
                <span class="s">"Maggie"</span><span class="o">,</span> <span class="s">"Moe"</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>Utiliser la m√©thode <code class="highlighter-rouge">Collections.sort</code> pour trier la liste par ordre alphab√©tique. Afficher la liste avant et apr√®s le tri.</li>
</ul>

<h2 id="tri-sur-nom-puis-pr√©nom">Tri sur nom puis pr√©nom</h2>

<p><img src="/img/ComparableEtudiant.png" alt="ComparableEtudiant" /></p>

<ul>
  <li>Dans la classe <code class="highlighter-rouge">Etudiant</code> :
    <ul>
      <li>Editer la d√©claration de la classe afin de pr√©ciser que la classe impl√©mente l‚Äôinterface <code class="highlighter-rouge">Comparable&lt;Etudiant&gt;</code></li>
      <li>Impl√©menter la m√©thode <code class="highlighter-rouge">compareTo</code> qui effectuera une comparaison sur le nom puis sur le pr√©nom (pour d√©partager les √©tudiants ayant le m√™me nom de famille). Pour ce faire, il faudra comparer des cha√Ænes de caract√®res en utilisant le fait que la classe <code class="highlighter-rouge">String</code> impl√©mente l‚Äôinterface <code class="highlighter-rouge">Comparable&lt;String&gt;</code> ou en utilisant la m√©thode compareToIgnoreCase si on ne veut pas tenir compte de la casse.</li>
    </ul>
  </li>
  <li>
    <p>Cr√©er une classe de tests unitaires (JUnit Test Case) <code class="highlighter-rouge">TestsTriEtudiants</code> pour valider le bon fonctionnement de l‚Äôinterface <code class="highlighter-rouge">Comparable&lt;Etudiant&gt;</code>. Utiliser la m√©thode <code class="highlighter-rouge">assertTrue</code> pour tester que les valeurs retourn√©es par l‚Äôappel de <code class="highlighter-rouge">compareTo</code> sont bien positives ou n√©gatives.</p>
  </li>
  <li>Dans la classe de tests unitaires ajouter une m√©thode dans laquelle on remplira une liste d‚Äô√©tudiants en prenant soin de prendre des pr√©noms et noms permettant de valider le bon fonctionnement du tri (homonymes, ‚Ä¶) qu‚Äôon triera ensuite et dont on v√©rifiera qu‚Äôelle donne bien le bon r√©sultat (utiliser <code class="highlighter-rouge">assertEquals</code> entre la liste tri√©e et une liste cr√©√©e avec les m√™mes √©l√©ments dans l‚Äôordre attendu).</li>
</ul>

<p><strong>Remarque</strong> : On vient de voir que le param√®tre de la m√©thode <code class="highlighter-rouge">Collections.sort(List&lt;T&gt; list)</code> √©tait du type List<T> (l'interface impl√©ment√©e par toutes les listes Java : AbstractList, AbstractSequentialList, ArrayList, AttributeList, CopyOnWriteArrayList, LinkedList, RoleList, RoleUnresolvedList, Stack, Vector). C'est une bonne pratique en Java, qui consiste √† manipuler les objets par leur interface plut√¥t que par leur classe concr√®te, on verra donc couramment le code suivant :</T></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Etudiant</span><span class="o">&gt;</span> <span class="n">etudiants</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Etudiant</span><span class="o">&gt;();</span>
</code></pre></div></div>

<p>Ainsi le reste du code ne d√©pend <strong>que</strong> des m√©thodes d√©finies dans l‚Äôinterface <code class="highlighter-rouge">List&lt;E&gt;</code> et il est possible par la suite de remplacer la classe concr√®te <code class="highlighter-rouge">ArrayList</code> par une autre impl√©mentation de l‚Äôinterface <code class="highlighter-rouge">List&lt;E&gt;</code> (par exemple <code class="highlighter-rouge">LinkedList</code>).</p>

<h2 id="tri-sur-pr√©nom-puis-nom">Tri sur pr√©nom puis nom</h2>

<p>Si maintenant on souhaite trier notre liste d‚Äô√©tudiants en utilisant un autre crit√®re, on arrive aux limites de l‚Äôinterface <code class="highlighter-rouge">Comparable</code>. En effet, celle-ci ne permet pas d‚Äôutiliser diff√©rents crit√®res de comparaison. La m√©thode <code class="highlighter-rouge">sort</code> de la classe <code class="highlighter-rouge">Collections</code> est surcharg√©e. On peut lui passer un deuxi√®me argument, en plus de la liste, qui est une r√©f√©rence vers un objet capable de comparer deux √©l√©ments de la liste :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="nc">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span>
</code></pre></div></div>

<p>Cette m√©thode attend un objet de type <code class="highlighter-rouge">Comparator&lt;? super T&gt;</code> (quelque chose capable de comparer des instances de la classe T ou de ses sous-classes). Si on veut trier notre liste d‚Äô√©tudiants par <em>pr√©nom</em> d‚Äôabord, puis par <em>nom</em>, il va falloir cr√©er ce comparateur.</p>

<ul>
  <li>
    <p>Cr√©er une classe <code class="highlighter-rouge">FirstThenLastNameComparator</code> qui impl√©mentera l‚Äôinterface <code class="highlighter-rouge">Comparator&lt;Etudiant&gt;</code> (<a href="https://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html">javadoc</a>) et ajouter une m√©thode de test dans la classe <code class="highlighter-rouge">TestsTriEtudiants</code> pour valider le bon fonctionnement. Il est possible de cr√©er des variables d‚Äôinstances dans la classe de test pour r√©utiliser des variables dans diff√©rentes m√©thodes de test. L‚Äôinitialisation de ces variables partag√©es peut-√™tre effectu√©e dans une m√©thode <code class="highlighter-rouge">setUp</code> marqu√©e par l‚Äôannotation <code class="highlighter-rouge">@Before</code>, qui sera appel√©e avant d‚Äôex√©cuter chaque m√©thode de test. Exemple :</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestsTriEtudiants</span> <span class="o">{</span>

      <span class="kd">private</span> <span class="nc">Etudiant</span> <span class="n">abrahamLincoln</span><span class="o">;</span>
      <span class="kd">private</span> <span class="nc">Etudiant</span> <span class="n">jamesBond</span><span class="o">;</span>
      <span class="kd">private</span> <span class="nc">Etudiant</span> <span class="n">johnBond</span><span class="o">;</span>
      <span class="kd">private</span> <span class="nc">Etudiant</span> <span class="n">johnDoe</span><span class="o">;</span>
      <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Etudiant</span><span class="o">&gt;</span> <span class="n">etudiants</span><span class="o">;</span>

      <span class="nd">@Before</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
          <span class="n">abrahamLincoln</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BonEtudiant</span><span class="o">(</span><span class="s">"Abraham"</span><span class="o">,</span> <span class="s">"Lincoln"</span><span class="o">);</span>
          <span class="n">jamesBond</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BonEtudiant</span><span class="o">(</span><span class="s">"James"</span><span class="o">,</span> <span class="s">"Bond"</span><span class="o">);</span>
          <span class="n">johnBond</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MauvaisEtudiant</span><span class="o">(</span><span class="s">"John"</span><span class="o">,</span> <span class="s">"Bond"</span><span class="o">);</span>
          <span class="n">johnDoe</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MauvaisEtudiant</span><span class="o">(</span><span class="s">"John"</span><span class="o">,</span> <span class="s">"Doe"</span><span class="o">);</span>
          <span class="n">etudiants</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
          <span class="n">etudiants</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">abrahamLincoln</span><span class="o">);</span>
          <span class="n">etudiants</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">johnBond</span><span class="o">);</span>
          <span class="n">etudiants</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">johnDoe</span><span class="o">);</span>	
          <span class="n">etudiants</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">jamesBond</span><span class="o">);</span>	
      <span class="o">}</span>
        
      <span class="o">...</span>
  <span class="o">}</span>

</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Faire valider par un enseignant.</strong></p>

<p><a href="/enonces/tp6">Suite‚Ä¶</a></p>
:ET